<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="StudyGroup">
	<insert id="insertStudyGroup" parameterType="StudyGroup">
		INSERT INTO STUDYGROUP
		<choose>
			<when test="studygroup_Openstatus eq 0">
				VALUES(seq_studygroup_studygroup_code.nextval, #{member_Code}, #{studygroup_Name}, #{location_Code}, #{studygroup_Goaltime}, #{studygroup_Maxnum}, #{studygroup_Intro}, SYSDATE, 0, null, #{category_Code}, #{studygroup_Openstatus}, null)
			</when>
			<when test="studygroup_Openstatus neq 0">
				VALUES(seq_studygroup_studygroup_code.nextval, #{member_Code}, #{studygroup_Name}, #{location_Code}, #{studygroup_Goaltime}, #{studygroup_Maxnum}, #{studygroup_Intro}, SYSDATE, 0, null, #{category_Code}, #{studygroup_Openstatus}, #{studygroup_Pwd})
			</when>
		</choose>
	</insert>
	
	<select id="selectMemberCode" resultType="_int">
		SELECT SEQ_STUDYGROUP_STUDYGROUP_CODE.CURRVAL
		FROM DUAL
	</select>
	
	<insert id="insertStudyGroupFiles" parameterType="StudyGroupFiles">
		INSERT INTO FILES(FILES_CODE,FILES_BOARDTYPE,FILES_ORIGINNAME,FILES_NAME,FILES_ENROLLDATE,FILES_STATUS,FILES_DELETEDATE,MEMBER_CODE,STUDYGROUP_CODE,PR_CODE,GROUPBOARD_CODE,FILES_ORDER)
   		VALUES(seq_files_files_code.nextval, 1, #{files_OriginName}, #{files_Name}, SYSDATE, 0, null, null, #{studygroup_Code}, null, null, 0)
	</insert>
	
	<select id="selectStudyGroupListCount" parameterType="PageInfo" resultType="_int">
		SELECT COUNT(SG.STUDYGROUP_CODE)
		FROM STUDYGROUP SG
		JOIN LOCATION L ON(SG.LOCATION_CODE = L.LOCATION_CODE)
		JOIN CATEGORY C ON(SG.CATEGORY_CODE = C.CATEGORY_CODE)
		JOIN FILES SGFILES ON(SG.STUDYGROUP_CODE = SGFILES.STUDYGROUP_CODE)
		JOIN FILES MFILES ON(SG.MEMBER_CODE = MFILES.MEMBER_CODE)
		LEFT JOIN (SELECT COUNT(MEMBER_CODE) AS JOINGROUP_MEMBERCOUNT, STUDYGROUP_CODE
		            FROM JOINGROUP
		            GROUP BY STUDYGROUP_CODE) JG ON(SG.STUDYGROUP_CODE = JG.STUDYGROUP_CODE)
		WHERE SG.STUDYGROUP_NAME LIKE '%' || #{searchSGName} || '%'
		<if test="location_Code neq 1">
			AND SG.LOCATION_CODE = #{location_Code}			
		</if>
		<if test="category_Code neq 0">
			AND SG.CATEGORY_CODE = #{category_Code}			
		</if>
		AND SGFILES.FILES_ORDER = 0
		AND MFILES.FILES_ORDER = 0
		AND SGFILES.FILES_STATUS = 0
		ORDER BY SG.STUDYGROUP_STDATE DESC
	</select>
	
	<select id="selectStudyGroupList" parameterType="PageInfo" resultType="java.util.HashMap">
		SELECT SG.STUDYGROUP_CODE, STUDYGROUP_NAME, STUDYGROUP_OPENSTATUS, STUDYGROUP_INTRO, TO_CHAR(STUDYGROUP_STDATE, 'yyyy"년" mm"월" dd"일"') AS STUDYGROUP_STDATE, STUDYGROUP_GOALTIME, STUDYGROUP_MAXNUM, SGFILES.FILES_NAME AS SGFILES_NAME, MFILES.FILES_NAME AS MFILES_NAME, SG.MEMBER_CODE, CATEGORY_NAME, LOCATION_NAME, NVL(JG.JOINGROUP_MEMBERCOUNT, 0) AS JOINGROUP_MEMBERCOUNT
		FROM STUDYGROUP SG
		JOIN LOCATION L ON(SG.LOCATION_CODE = L.LOCATION_CODE)
		JOIN CATEGORY C ON(SG.CATEGORY_CODE = C.CATEGORY_CODE)
		JOIN FILES SGFILES ON(SG.STUDYGROUP_CODE = SGFILES.STUDYGROUP_CODE)
		JOIN FILES MFILES ON(SG.MEMBER_CODE = MFILES.MEMBER_CODE)
		LEFT JOIN (SELECT COUNT(MEMBER_CODE) AS JOINGROUP_MEMBERCOUNT, STUDYGROUP_CODE
		            FROM JOINGROUP
		            GROUP BY STUDYGROUP_CODE) JG ON(SG.STUDYGROUP_CODE = JG.STUDYGROUP_CODE)
		WHERE SG.STUDYGROUP_NAME LIKE '%' || #{searchSGName} || '%'
		<if test="location_Code neq 1">
			AND SG.LOCATION_CODE = #{location_Code}			
		</if>
		<if test="category_Code neq 0">
			AND SG.CATEGORY_CODE = #{category_Code}			
		</if>
		AND SGFILES.FILES_ORDER = 0
		AND MFILES.FILES_ORDER = 0
		AND SGFILES.FILES_STATUS = 0
		ORDER BY SG.STUDYGROUP_STDATE DESC
	</select>
	
	<select id="studyGroupSelectJoinSGList" parameterType="_int" resultType="map">
		SELECT DISTINCT SG.STUDYGROUP_CODE, SG.STUDYGROUP_NAME, SG.STUDYGROUP_INTRO, TO_CHAR(SG.STUDYGROUP_STDATE, 'YYYY"년" MM"월" DD"일"') AS STUDYGROUP_STDATE,
		SG.MEMBER_CODE AS STUDYGROUP_BOSSCODE, TO_CHAR(JG.JOINGROUP_ENROLLDATE, 'YYYY"년" MM"월" DD"일"') AS JOINGROUP_ENROLLDATE,
		JG.MEMBER_CODE, JMF.FILES_NAME AS FILES_FILES_MEMBERNAME, SGF.FILES_NAME AS FILES_SUTDYGROUPNAME,
		SG.STUDYGROUP_GOALTIME, SG.STUDYGROUP_MAXNUM, JGC.JOINGROUP_CURRENTNUM, NVL(MEAT.MEAT_STUDYTIME, 0) AS MEAT_STUDYTIME,
		<![CDATA[
			(CASE WHEN ROUND(NVL(AT_STUDYTIME, 0) / (SG.STUDYGROUP_GOALTIME * 3600), 2) * 100 > 100
			        THEN 100
			      WHEN ROUND(NVL(AT_STUDYTIME, 0) / (SG.STUDYGROUP_GOALTIME * 3600), 2) * 100 < 100 
			        THEN ROUND(NVL(AT_STUDYTIME, 0) / (SG.STUDYGROUP_GOALTIME * 3600), 2) * 100 END) AS STUDYGROUP_GOALPERCENT
		]]>        
		FROM STUDYGROUP SG
		LEFT JOIN JOINGROUP JG ON(SG.STUDYGROUP_CODE = JG.STUDYGROUP_CODE)
		LEFT JOIN (SELECT COUNT(MEMBER_CODE) AS JOINGROUP_CURRENTNUM, STUDYGROUP_CODE, JOINGROUP_DELETEDATE
		           FROM JOINGROUP
		           WHERE JOINGROUP_DELETEDATE IS NULL
		           GROUP BY STUDYGROUP_CODE, JOINGROUP_DELETEDATE) JGC ON(JGC.STUDYGROUP_CODE = JG.STUDYGROUP_CODE)
		LEFT JOIN FILES JMF ON(JG.MEMBER_CODE = JMF.MEMBER_CODE)
		LEFT JOIN FILES SGF ON(JG.STUDYGROUP_CODE = SGF.STUDYGROUP_CODE)
		LEFT JOIN (SELECT SUM(NVL(STUDYTIME_STUDYTIME, 0)) AS AT_STUDYTIME, STUDYGROUP_CODE
		           FROM STUDYTIME
		           WHERE NVL(TO_CHAR(STUDYTIME_DATE, 'YYYYMMDD'), TO_CHAR(SYSDATE, 'YYYYMMDD')) = TO_CHAR(SYSDATE, 'YYYYMMDD')
		           GROUP BY STUDYGROUP_CODE) AT ON(SG.STUDYGROUP_CODE = AT.STUDYGROUP_CODE)
		LEFT JOIN (SELECT TRUNC((SUM(NVL(STUDYTIME_STUDYTIME, 0)) / 60) / 60) AS MEAT_STUDYTIME, STUDYGROUP_CODE
		           FROM STUDYTIME
		           WHERE MEMBER_CODE = #{member_Code}
		           GROUP BY STUDYGROUP_CODE) MEAT ON(SG.STUDYGROUP_CODE = MEAT.STUDYGROUP_CODE)
		WHERE SG.STUDYGROUP_CODE IN(SELECT STUDYGROUP_CODE
		                            FROM JOINGROUP
		                            WHERE MEMBER_CODE = #{member_Code})
		GROUP BY SG.STUDYGROUP_CODE, SG.STUDYGROUP_NAME, SG.STUDYGROUP_INTRO, SG.STUDYGROUP_STDATE, SG.STUDYGROUP_GOALTIME, 
		SG.STUDYGROUP_MAXNUM, SG.MEMBER_CODE, JG.JOINGROUP_ENROLLDATE, JG.MEMBER_CODE, 
		AT_STUDYTIME, JMF.FILES_NAME, SGF.FILES_NAME, JGC.JOINGROUP_CURRENTNUM, MEAT.MEAT_STUDYTIME,
		<![CDATA[
			(CASE WHEN ROUND(NVL(AT_STUDYTIME, 0) / (SG.STUDYGROUP_GOALTIME * 3600), 2) * 100 > 100 
			        THEN 100 
			      WHEN ROUND(NVL(AT_STUDYTIME, 0) / (SG.STUDYGROUP_GOALTIME * 3600), 2) * 100 < 100 
			        THEN ROUND(NVL(AT_STUDYTIME, 0) / (SG.STUDYGROUP_GOALTIME * 3600), 2) * 100 END)
		]]>
		ORDER BY STUDYGROUP_GOALPERCENT DESC
	</select>
	
	<select id="studyGroupSelectRecommendSGList" parameterType="_int" resultType="map">
		SELECT SG.STUDYGROUP_CODE, SG.STUDYGROUP_NAME, SG.STUDYGROUP_INTRO, TO_CHAR(SG.STUDYGROUP_STDATE, 'YYYY"년" MM"월" DD"일"') AS STUDYGROUP_STDATE, F.FILES_NAME,
		<![CDATA[
			(CASE WHEN ROUND(NVL(AT_STUDYTIME, 0) / (SG.STUDYGROUP_GOALTIME * 3600), 2) * 100 > 100
			        THEN 100
			      WHEN ROUND(NVL(AT_STUDYTIME, 0) / (SG.STUDYGROUP_GOALTIME * 3600), 2) * 100 < 100 
			        THEN ROUND(NVL(AT_STUDYTIME, 0) / (SG.STUDYGROUP_GOALTIME * 3600), 2) * 100 END) AS STUDYGROUP_GOALPERCENT
		]]>        
		FROM STUDYGROUP SG
		JOIN FILES F ON(SG.STUDYGROUP_CODE = F.STUDYGROUP_CODE)
		LEFT JOIN (SELECT SUM(NVL(STUDYTIME_STUDYTIME, 0)) AS AT_STUDYTIME, STUDYGROUP_CODE
		           FROM STUDYTIME
		           WHERE NVL(TO_CHAR(STUDYTIME_DATE, 'YYYYMMDD'), TO_CHAR(SYSDATE, 'YYYYMMDD')) = TO_CHAR(SYSDATE, 'YYYYMMDD')
		           GROUP BY STUDYGROUP_CODE) AT ON(SG.STUDYGROUP_CODE = AT.STUDYGROUP_CODE)
		WHERE SG.STUDYGROUP_CODE IN(SELECT STUDYGROUP_CODE
		                            FROM(SELECT ROWNUM AS SEQNUM, STT.STUDYTIME_TOTAL / JGC.MEMBER_COUNT AS STUDYGROUP_GOALPERCENT, SG.STUDYGROUP_CODE
		                                 FROM STUDYGROUP SG
		                                 LEFT JOIN(SELECT SUM(NVL(STUDYTIME_STUDYTIME, 0)) AS STUDYTIME_TOTAL, STUDYGROUP_CODE
		                                           FROM STUDYTIME 
		                                           WHERE TO_CHAR(STUDYTIME_DATE, 'YYYYMMDD') BETWEEN TO_CHAR(SYSDATE - 7, 'YYYYMMDD') AND TO_CHAR(SYSDATE, 'YYYYMMDD')
		                                           GROUP BY STUDYGROUP_CODE) STT ON(SG.STUDYGROUP_CODE = STT.STUDYGROUP_CODE)
		                                 LEFT JOIN(SELECT COUNT(NVL(MEMBER_CODE, 0)) AS MEMBER_COUNT, STUDYGROUP_CODE
		                                           FROM JOINGROUP
		                                           GROUP BY STUDYGROUP_CODE) JGC ON(SG.STUDYGROUP_CODE = JGC.STUDYGROUP_CODE)
		                                 WHERE SG.STUDYGROUP_CODE NOT IN(SELECT STUDYGROUP_CODE
		                                                                 FROM STUDYGROUP
		                                                                 WHERE MEMBER_CODE = #{member_Code})
		                                 GROUP BY ROWNUM, STT.STUDYTIME_TOTAL / JGC.MEMBER_COUNT, SG.STUDYGROUP_CODE
		                                 ORDER BY STUDYGROUP_GOALPERCENT DESC NULLS LAST)
		                            WHERE SEQNUM BETWEEN 1 AND 5)
	</select>
	
	<select id="studyGroupInSGRankingList" parameterType="_int" resultType="map">
		SELECT STUDYGROUP_TIMEAVERAGE, STUDYGROUP_NAME, STUDYGROUP_CODE, CATEGORY_NAME, CATEGORY_TOTALNUM, 
		INGROUP_CHECK , RANK() OVER( PARTITION BY CATEGORY_CODE ORDER BY STUDYGROUP_TIMEAVERAGE DESC ) AS RANK  
		FROM(SELECT NVL(ROUND(STT.STUDYTIME_TOTAL / NVL(JGC.MEMBER_COUNT, 0), 0), 0) AS STUDYGROUP_TIMEAVERAGE, C.CATEGORY_NAME, SG.STUDYGROUP_NAME,
			 SG.STUDYGROUP_CODE, SG.CATEGORY_CODE, SGC.CATEGORY_TOTALNUM, NVL(JG.INGROUP_CHECK, 0) AS INGROUP_CHECK
		     FROM STUDYGROUP SG
		     LEFT JOIN CATEGORY C ON(SG.CATEGORY_CODE = C.CATEGORY_CODE)
		     LEFT JOIN(SELECT SUM(NVL(STUDYTIME_STUDYTIME, 0)) AS STUDYTIME_TOTAL, STUDYGROUP_CODE
		               FROM STUDYTIME 
		               WHERE TO_CHAR(STUDYTIME_DATE, 'YYYYMMDD') BETWEEN TO_CHAR(SYSDATE - 30, 'YYYYMMDD') AND TO_CHAR(SYSDATE, 'YYYYMMDD')
		               GROUP BY STUDYGROUP_CODE) STT ON(SG.STUDYGROUP_CODE = STT.STUDYGROUP_CODE)
		     LEFT JOIN(SELECT COUNT(NVL(MEMBER_CODE, 0)) AS MEMBER_COUNT, STUDYGROUP_CODE
		               FROM JOINGROUP
		               GROUP BY STUDYGROUP_CODE) JGC ON(SG.STUDYGROUP_CODE = JGC.STUDYGROUP_CODE)
		     RIGHT JOIN(SELECT COUNT(STUDYGROUP_CODE) AS CATEGORY_TOTALNUM, CATEGORY_CODE
		                FROM STUDYGROUP
		                GROUP BY CATEGORY_CODE
		                ORDER BY CATEGORY_CODE) SGC ON(SG.CATEGORY_CODE = SGC.CATEGORY_CODE)
		     RIGHT JOIN(SELECT STUDYGROUP_CODE AS INGROUP_CHECK
		                FROM JOINGROUP
		                WHERE MEMBER_CODE = #{member_Code}) JG ON(SG.STUDYGROUP_CODE = JG.INGROUP_CHECK)
		     GROUP BY NVL(ROUND(STT.STUDYTIME_TOTAL / NVL(JGC.MEMBER_COUNT, 0), 0), 0), SG.STUDYGROUP_CODE, C.CATEGORY_NAME, SG.STUDYGROUP_NAME, SG.CATEGORY_CODE, SGC.CATEGORY_TOTALNUM, NVL(JG.INGROUP_CHECK, 0)
		     ORDER BY SG.CATEGORY_CODE, STUDYGROUP_TIMEAVERAGE DESC NULLS LAST)
	</select>
	
	<select id="studyGroupInSGLastBoardList" parameterType="_int" resultType="map">
		SELECT GB.GROUPBOARD_CODE, GB.GROUPBOARD_TITLE, GB.GROUPBOARD_CONTENT, GB.STUDYGROUP_CODE, GB.MEMBER_CODE
		FROM GROUPBOARD GB
		RIGHT JOIN STUDYGROUP SG ON(GB.STUDYGROUP_CODE = SG.STUDYGROUP_CODE)
		WHERE GB.GROUPBOARD_CODE NOT IN(SELECT GROUPBOARD_CODE
		                                FROM BOARDVIEW
		                                WHERE MEMBER_CODE = #{member_Code})
	</select>
	
	<select id="studyGroupInSGMyBoardArea" parameterType="_int" resultType="map">
		SELECT ROWNUM AS SEQNUM, GB.GROUPBOARD_CODE, GB.GROUPBOARD_TITLE, GB.GROUPBOARD_CONTENT, GB.STUDYGROUP_CODE, GB.MEMBER_CODE, NVL(R.REPLY_CODE, 0) AS REPLY_CODE
		FROM GROUPBOARD GB
		LEFT JOIN REPLY R ON(GB.GROUPBOARD_CODE = R.GROUPBOARD_CODE)
		WHERE GB.MEMBER_CODE = #{member_Code}
		AND ROWNUM BETWEEN 1 AND 5
	</select>
	
	<select id="selectStudyGroupSGRTRankArea" parameterType="java.lang.Integer" resultType="map">
		SELECT ROWNUM AS STUDYGROUP_RANK, SG.STUDYGROUP_NAME, SG.STUDYGROUP_INTRO, NVL(ROUND(STT.STUDYTIME_TOTAL / NVL(JGC.MEMBER_COUNT, 0), 0), 0) AS STUDYGROUP_TIMEAVERAGE, SG.STUDYGROUP_CODE, SG.CATEGORY_CODE, C.CATEGORY_NAME, F.FILES_NAME
		FROM STUDYGROUP SG
		JOIN CATEGORY C ON(SG.CATEGORY_CODE = C.CATEGORY_CODE)
		JOIN FILES F ON(SG.STUDYGROUP_CODE = F.STUDYGROUP_CODE)
		LEFT JOIN(SELECT SUM(NVL(STUDYTIME_STUDYTIME, 0)) AS STUDYTIME_TOTAL, STUDYGROUP_CODE
		          FROM STUDYTIME 
		          WHERE TO_CHAR(STUDYTIME_DATE, 'YYYYMMDD') BETWEEN TO_CHAR(SYSDATE - 7, 'YYYYMMDD') AND TO_CHAR(SYSDATE, 'YYYYMMDD')
		          GROUP BY STUDYGROUP_CODE) STT ON(SG.STUDYGROUP_CODE = STT.STUDYGROUP_CODE)
		LEFT JOIN(SELECT COUNT(NVL(MEMBER_CODE, 0)) AS MEMBER_COUNT, STUDYGROUP_CODE
		          FROM JOINGROUP
		          GROUP BY STUDYGROUP_CODE) JGC ON(SG.STUDYGROUP_CODE = JGC.STUDYGROUP_CODE)
		WHERE ROWNUM BETWEEN 1 AND 10
		<if test="_parameter != 0">
			AND SG.CATEGORY_CODE = #{category_Code}			
		</if>
		GROUP BY ROWNUM, SG.STUDYGROUP_NAME, SG.STUDYGROUP_INTRO, NVL(ROUND(STT.STUDYTIME_TOTAL / NVL(JGC.MEMBER_COUNT, 0), 0), 0), SG.STUDYGROUP_CODE, SG.CATEGORY_CODE, C.CATEGORY_NAME, F.FILES_NAME
		ORDER BY STUDYGROUP_RANK
	</select>
	
	<select id="insertStudyGroupJoin" parameterType="StudyGroup">
		INSERT INTO JOINGROUP(STUDYGROUP_CODE,MEMBER_CODE,JOINGROUP_ENROLLDATE,JOINGROUP_DELETEDATE,JOINGROUP_STATUS,JOINGROUP_CODE)
		VALUES(SEQ_STUDYGROUP_STUDYGROUP_CODE.CURRVAL, #{member_Code}, SYSDATE, NULL, 0, SEQ_JOINGROUP_JOINGROUP_CODE.NEXTVAL)
	</select>
	
	<!-- 주제 별 통계 -->
	<select id="selectSGCategoryChart" parameterType="map" resultType="map">
		SELECT TO_NUMBER(MAX(NVL(SGTODAY_GAP_TIME, TO_CHAR('0')))) - TO_NUMBER(MAX(NVL(SGYESTERDAY_GAP_TIME, TO_CHAR('0')))) AS SG_GAPTIME,
		TO_NUMBER(MAX(NVL(MESGTODAY_GAP_TIME, TO_CHAR('0')))) - TO_NUMBER(MAX(NVL(MESGYESTERDAY_GAP_TIME, TO_CHAR('0')))) AS MESG_GAPTIME,
		CASE
		    WHEN MAX(TO_NUMBER(SGYESTERDAY_GAP_TIME)) != 0 THEN ROUND((((MAX(TO_NUMBER(SGTODAY_GAP_TIME)) / MAX(TO_NUMBER(SGYESTERDAY_GAP_TIME))) * 100) - 100), 2)
		    WHEN MAX(TO_NUMBER(SGYESTERDAY_GAP_TIME)) = 0 THEN 100
		END AS SG_GAPTIME_PERCENT,
		CASE
		    WHEN MAX(TO_NUMBER(MESGYESTERDAY_GAP_TIME)) != 0 THEN ROUND((((MAX(TO_NUMBER(MESGTODAY_GAP_TIME)) / MAX(TO_NUMBER(MESGYESTERDAY_GAP_TIME))) * 100) - 100), 2)
		    WHEN MAX(TO_NUMBER(MESGYESTERDAY_GAP_TIME)) = 0 THEN 100
		END AS MESG_GAPTIME_PERCENT
		FROM
		(
		SELECT TLTA.SGTODAY_GAP_TIME, NULL AS MESGTODAY_GAP_TIME, NULL AS SGYESTERDAY_GAP_TIME, NULL AS MESGYESTERDAY_GAP_TIME
		FROM(SELECT NVL(TO_CHAR(TO_DATE(ROUND(AVG(STUDYTIME_STUDYTIME)),'sssss'),'mi'), 0) AS SGTODAY_GAP_TIME
		     FROM STUDYTIME
		     WHERE STUDYGROUP_CODE IN(SELECT STUDYGROUP_CODE
		                              FROM STUDYGROUP
		                              WHERE CATEGORY_CODE = (SELECT CATEGORY_CODE
		                                                     FROM STUDYGROUP
		                                                     WHERE STUDYGROUP_CODE = #{studygroup_Code}))
		     AND STUDYGROUP_CODE NOT IN(#{studygroup_Code})
			 <choose>
			 	<when test="period eq 'thisMonth'">
					AND TO_CHAR(STUDYTIME_DATE, 'YYYYMMDD') BETWEEN TO_CHAR(SYSDATE - 30, 'YYYYMMDD') AND TO_CHAR(SYSDATE, 'YYYYMMDD')) TLTA
				</when>
				<when test="period eq 'thisWeek'">
					AND TO_CHAR(STUDYTIME_DATE, 'YYYYMMDD') BETWEEN TO_CHAR(SYSDATE - 7, 'YYYYMMDD') AND TO_CHAR(SYSDATE, 'YYYYMMDD')) TLTA
				</when>
				<when test="period eq 'today'">
					AND TO_CHAR(STUDYTIME_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE, 'YYYYMMDD')) TLTA
				</when>
			 </choose>
		
		UNION ALL
		
		SELECT NULL AS SGTODAY_GAP_TIME, MTLTA.MESGTODAY_GAP_TIME, NULL AS SGYESTERDAY_GAP_TIME, NULL AS MESGYESTERDAY_GAP_TIME
		FROM(SELECT NVL(TO_CHAR(TO_DATE(ROUND(AVG(STUDYTIME_STUDYTIME)),'sssss'),'mi'), 0) AS MESGTODAY_GAP_TIME
		     FROM STUDYTIME
		     WHERE STUDYGROUP_CODE = #{studygroup_Code}
		     <choose>
			 	<when test="period eq 'thisMonth'">
					AND TO_CHAR(STUDYTIME_DATE, 'YYYYMMDD') BETWEEN TO_CHAR(SYSDATE - 30, 'YYYYMMDD') AND TO_CHAR(SYSDATE, 'YYYYMMDD')) MTLTA
				</when>
				<when test="period eq 'thisWeek'">
					AND TO_CHAR(STUDYTIME_DATE, 'YYYYMMDD') BETWEEN TO_CHAR(SYSDATE - 7, 'YYYYMMDD') AND TO_CHAR(SYSDATE, 'YYYYMMDD')) MTLTA
				</when>
				<when test="period eq 'today'">
					AND TO_CHAR(STUDYTIME_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE, 'YYYYMMDD')) MTLTA
				</when>
			 </choose>
		
		UNION ALL
		
		SELECT NULL AS SGTODAY_GAP_TIME, NULL AS MESGTODAY_GAP_TIME, YLTA.SGYESTERDAY_GAP_TIME, NULL AS MESGYESTERDAY_GAP_TIME
		FROM(SELECT NVL(TO_CHAR(TO_DATE(ROUND(AVG(STUDYTIME_STUDYTIME)),'sssss'),'mi'), 0) AS SGYESTERDAY_GAP_TIME
		     FROM STUDYTIME
		     WHERE STUDYGROUP_CODE IN(SELECT STUDYGROUP_CODE
		                              FROM STUDYGROUP
		                              WHERE CATEGORY_CODE = (SELECT CATEGORY_CODE
		                                                     FROM STUDYGROUP
		                                                     WHERE STUDYGROUP_CODE = #{studygroup_Code}))
		     AND STUDYGROUP_CODE NOT IN(#{studygroup_Code})
		     <choose>
			 	<when test="period eq 'thisMonth'">
					AND TO_CHAR(STUDYTIME_DATE, 'YYYYMMDD') BETWEEN TO_CHAR(SYSDATE - 60, 'YYYYMMDD') AND TO_CHAR(SYSDATE - 30, 'YYYYMMDD')) YLTA
				</when>
				<when test="period eq 'thisWeek'">
					AND TO_CHAR(STUDYTIME_DATE, 'YYYYMMDD') BETWEEN TO_CHAR(SYSDATE - 14, 'YYYYMMDD') AND TO_CHAR(SYSDATE - 7, 'YYYYMMDD')) YLTA
				</when>
				<when test="period eq 'today'">
					AND TO_CHAR(STUDYTIME_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE - 1, 'YYYYMMDD')) YLTA
				</when>
			 </choose>
		     
		UNION ALL
		
		SELECT NULL AS SGTODAY_GAP_TIME, NULL AS MESGTODAY_GAP_TIME, NULL AS SGYESTERDAY_GAP_TIME, MYLTA.MESGYESTERDAY_GAP_TIME
		FROM(SELECT NVL(TO_CHAR(TO_DATE(ROUND(AVG(STUDYTIME_STUDYTIME)),'sssss'),'mi'), 0) AS MESGYESTERDAY_GAP_TIME
		     FROM STUDYTIME
		     WHERE STUDYGROUP_CODE = #{studygroup_Code}
		     <choose>
			 	<when test="period eq 'thisMonth'">
					AND TO_CHAR(STUDYTIME_DATE, 'YYYYMMDD') BETWEEN TO_CHAR(SYSDATE - 60, 'YYYYMMDD') AND TO_CHAR(SYSDATE - 30, 'YYYYMMDD')) MYLTA
				</when>
				<when test="period eq 'thisWeek'">
					AND TO_CHAR(STUDYTIME_DATE, 'YYYYMMDD') BETWEEN TO_CHAR(SYSDATE - 14, 'YYYYMMDD') AND TO_CHAR(SYSDATE - 7, 'YYYYMMDD')) MYLTA
				</when>
				<when test="period eq 'today'">
					AND TO_CHAR(STUDYTIME_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE - 1, 'YYYYMMDD')) MYLTA
				</when>
			 </choose>
		)
	</select>
	<!-- 주제 별 통계 -->
	
	<!-- 주제 시간별 데이터 -->
	<select id="selectSGCategoryChartTime" parameterType="map" resultType="map">
		SELECT TZ.TIMEZONE_TIMEZONE, NVL(ST.STUDYTIME_STUDYTIME, 0) AS STUDYTIME_STUDYTIME, NVL(MEST.STUDYTIME_STUDYTIME, 0) AS MESTUDYTIME_STUDYTIME
		<![CDATA[
			FROM(SELECT LEVEL - 1 AS TIMEZONE_TIMEZONE
		     FROM DUAL
		     CONNECT BY LEVEL <= 24) TZ
		]]>
		LEFT JOIN(SELECT NVL(TO_CHAR(TO_DATE(ROUND(AVG(STUDYTIME_STUDYTIME)),'sssss'),'mi'), 0) AS STUDYTIME_STUDYTIME, STUDYTIME_TIMEZONE
		          FROM STUDYTIME
		          WHERE STUDYGROUP_CODE IN(SELECT STUDYGROUP_CODE
		                                   FROM STUDYGROUP
		                                   WHERE LOCATION_CODE = (SELECT LOCATION_CODE
		                                                          FROM STUDYGROUP
		                                                          WHERE STUDYGROUP_CODE = #{studygroup_Code}))
		          AND STUDYGROUP_CODE NOT IN(#{studygroup_Code})
		          <choose>
				 	 <when test="period eq 'thisMonth'">
						 AND TO_CHAR(STUDYTIME_DATE, 'YYYYMMDD') BETWEEN TO_CHAR(SYSDATE - 30, 'YYYYMMDD') AND TO_CHAR(SYSDATE, 'YYYYMMDD')
					 </when>
					 <when test="period eq 'thisWeek'">
						 AND TO_CHAR(STUDYTIME_DATE, 'YYYYMMDD') BETWEEN TO_CHAR(SYSDATE - 7, 'YYYYMMDD') AND TO_CHAR(SYSDATE, 'YYYYMMDD')
					 </when>
					 <when test="period eq 'today'">
						 AND TO_CHAR(STUDYTIME_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE, 'YYYYMMDD')
					 </when>
				  </choose>
		          GROUP BY STUDYTIME_TIMEZONE) ST ON(TZ.TIMEZONE_TIMEZONE = ST.STUDYTIME_TIMEZONE)
		LEFT JOIN(SELECT NVL(TO_CHAR(TO_DATE(ROUND(AVG(STUDYTIME_STUDYTIME)),'sssss'),'mi'), 0) AS STUDYTIME_STUDYTIME, STUDYTIME_TIMEZONE
		          FROM STUDYTIME
		          WHERE STUDYGROUP_CODE = #{studygroup_Code}
		          <choose>
				 	 <when test="period eq 'thisMonth'">
						 AND TO_CHAR(STUDYTIME_DATE, 'YYYYMMDD') BETWEEN TO_CHAR(SYSDATE - 30, 'YYYYMMDD') AND TO_CHAR(SYSDATE, 'YYYYMMDD')
					 </when>
					 <when test="period eq 'thisWeek'">
						 AND TO_CHAR(STUDYTIME_DATE, 'YYYYMMDD') BETWEEN TO_CHAR(SYSDATE - 7, 'YYYYMMDD') AND TO_CHAR(SYSDATE, 'YYYYMMDD')
					 </when>
					 <when test="period eq 'today'">
						 AND TO_CHAR(STUDYTIME_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE, 'YYYYMMDD')
					 </when>
				  </choose>
		          GROUP BY STUDYTIME_TIMEZONE) MEST ON(TZ.TIMEZONE_TIMEZONE = MEST.STUDYTIME_TIMEZONE)
		ORDER BY TZ.TIMEZONE_TIMEZONE
	</select>
	<!-- 주제 시간별 데이터 -->
	
	<!-- 지역 별 통계 -->
	<select id="selectSGLocationChart" parameterType="map" resultType="map">
		SELECT TO_NUMBER(MAX(NVL(SGTODAY_GAP_TIME, TO_CHAR('0')))) - TO_NUMBER(MAX(NVL(SGYESTERDAY_GAP_TIME, TO_CHAR('0')))) AS SG_GAPTIME,
		TO_NUMBER(MAX(NVL(MESGTODAY_GAP_TIME, TO_CHAR('0')))) - TO_NUMBER(MAX(NVL(MESGYESTERDAY_GAP_TIME, TO_CHAR('0')))) AS MESG_GAPTIME,
		CASE
		    WHEN MAX(TO_NUMBER(SGYESTERDAY_GAP_TIME)) != 0 THEN ROUND((((MAX(TO_NUMBER(SGTODAY_GAP_TIME)) / MAX(TO_NUMBER(SGYESTERDAY_GAP_TIME))) * 100) - 100), 2)
		    WHEN MAX(TO_NUMBER(SGYESTERDAY_GAP_TIME)) = 0 THEN 100
		END AS SG_GAPTIME_PERCENT,
		CASE
		    WHEN MAX(TO_NUMBER(MESGYESTERDAY_GAP_TIME)) != 0 THEN ROUND((((MAX(TO_NUMBER(MESGTODAY_GAP_TIME)) / MAX(TO_NUMBER(MESGYESTERDAY_GAP_TIME))) * 100) - 100), 2)
		    WHEN MAX(TO_NUMBER(MESGYESTERDAY_GAP_TIME)) = 0 THEN 100
		END AS MESG_GAPTIME_PERCENT
		FROM
		(
		SELECT TLTA.SGTODAY_GAP_TIME, NULL AS MESGTODAY_GAP_TIME, NULL AS SGYESTERDAY_GAP_TIME, NULL AS MESGYESTERDAY_GAP_TIME
		FROM(SELECT NVL(TO_CHAR(TO_DATE(ROUND(AVG(STUDYTIME_STUDYTIME)),'sssss'),'mi'), 0) AS SGTODAY_GAP_TIME
		     FROM STUDYTIME
		     WHERE STUDYGROUP_CODE IN(SELECT STUDYGROUP_CODE
		                              FROM STUDYGROUP
		                              WHERE LOCATION_CODE = (SELECT LOCATION_CODE
		                                                     FROM STUDYGROUP
		                                                     WHERE STUDYGROUP_CODE = #{studygroup_Code}))
		     AND STUDYGROUP_CODE NOT IN(#{studygroup_Code})
			 <choose>
			 	<when test="period eq 'thisMonth'">
					AND TO_CHAR(STUDYTIME_DATE, 'YYYYMMDD') BETWEEN TO_CHAR(SYSDATE - 30, 'YYYYMMDD') AND TO_CHAR(SYSDATE, 'YYYYMMDD')) TLTA
				</when>
				<when test="period eq 'thisWeek'">
					AND TO_CHAR(STUDYTIME_DATE, 'YYYYMMDD') BETWEEN TO_CHAR(SYSDATE - 7, 'YYYYMMDD') AND TO_CHAR(SYSDATE, 'YYYYMMDD')) TLTA
				</when>
				<when test="period eq 'today'">
					AND TO_CHAR(STUDYTIME_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE, 'YYYYMMDD')) TLTA
				</when>
			 </choose>
		
		UNION ALL
		
		SELECT NULL AS SGTODAY_GAP_TIME, MTLTA.MESGTODAY_GAP_TIME, NULL AS SGYESTERDAY_GAP_TIME, NULL AS MESGYESTERDAY_GAP_TIME
		FROM(SELECT NVL(TO_CHAR(TO_DATE(ROUND(AVG(STUDYTIME_STUDYTIME)),'sssss'),'mi'), 0) AS MESGTODAY_GAP_TIME
		     FROM STUDYTIME
		     WHERE STUDYGROUP_CODE = #{studygroup_Code}
		     <choose>
			 	<when test="period eq 'thisMonth'">
					AND TO_CHAR(STUDYTIME_DATE, 'YYYYMMDD') BETWEEN TO_CHAR(SYSDATE - 30, 'YYYYMMDD') AND TO_CHAR(SYSDATE, 'YYYYMMDD')) MTLTA
				</when>
				<when test="period eq 'thisWeek'">
					AND TO_CHAR(STUDYTIME_DATE, 'YYYYMMDD') BETWEEN TO_CHAR(SYSDATE - 7, 'YYYYMMDD') AND TO_CHAR(SYSDATE, 'YYYYMMDD')) MTLTA
				</when>
				<when test="period eq 'today'">
					AND TO_CHAR(STUDYTIME_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE, 'YYYYMMDD')) MTLTA
				</when>
			 </choose>
		
		UNION ALL
		
		SELECT NULL AS SGTODAY_GAP_TIME, NULL AS MESGTODAY_GAP_TIME, YLTA.SGYESTERDAY_GAP_TIME, NULL AS MESGYESTERDAY_GAP_TIME
		FROM(SELECT NVL(TO_CHAR(TO_DATE(ROUND(AVG(STUDYTIME_STUDYTIME)),'sssss'),'mi'), 0) AS SGYESTERDAY_GAP_TIME
		     FROM STUDYTIME
		     WHERE STUDYGROUP_CODE IN(SELECT STUDYGROUP_CODE
		                              FROM STUDYGROUP
		                              WHERE LOCATION_CODE = (SELECT LOCATION_CODE
		                                                     FROM STUDYGROUP
		                                                     WHERE STUDYGROUP_CODE = #{studygroup_Code}))
		     AND STUDYGROUP_CODE NOT IN(#{studygroup_Code})
		     <choose>
			 	<when test="period eq 'thisMonth'">
					AND TO_CHAR(STUDYTIME_DATE, 'YYYYMMDD') BETWEEN TO_CHAR(SYSDATE - 60, 'YYYYMMDD') AND TO_CHAR(SYSDATE - 30, 'YYYYMMDD')) YLTA
				</when>
				<when test="period eq 'thisWeek'">
					AND TO_CHAR(STUDYTIME_DATE, 'YYYYMMDD') BETWEEN TO_CHAR(SYSDATE - 14, 'YYYYMMDD') AND TO_CHAR(SYSDATE - 7, 'YYYYMMDD')) YLTA
				</when>
				<when test="period eq 'today'">
					AND TO_CHAR(STUDYTIME_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE - 1, 'YYYYMMDD')) YLTA
				</when>
			 </choose>
		     
		UNION ALL
		
		SELECT NULL AS SGTODAY_GAP_TIME, NULL AS MESGTODAY_GAP_TIME, NULL AS SGYESTERDAY_GAP_TIME, MYLTA.MESGYESTERDAY_GAP_TIME
		FROM(SELECT NVL(TO_CHAR(TO_DATE(ROUND(AVG(STUDYTIME_STUDYTIME)),'sssss'),'mi'), 0) AS MESGYESTERDAY_GAP_TIME
		     FROM STUDYTIME
		     WHERE STUDYGROUP_CODE = #{studygroup_Code}
		     <choose>
			 	<when test="period eq 'thisMonth'">
					AND TO_CHAR(STUDYTIME_DATE, 'YYYYMMDD') BETWEEN TO_CHAR(SYSDATE - 60, 'YYYYMMDD') AND TO_CHAR(SYSDATE - 30, 'YYYYMMDD')) MYLTA
				</when>
				<when test="period eq 'thisWeek'">
					AND TO_CHAR(STUDYTIME_DATE, 'YYYYMMDD') BETWEEN TO_CHAR(SYSDATE - 14, 'YYYYMMDD') AND TO_CHAR(SYSDATE - 7, 'YYYYMMDD')) MYLTA
				</when>
				<when test="period eq 'today'">
					AND TO_CHAR(STUDYTIME_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE - 1, 'YYYYMMDD')) MYLTA
				</when>
			 </choose>
		)
	</select>
	<!-- 지역 별 통계 -->
	
	<!-- 지역 시간별 데이터 -->
	<select id="selectSGLocationChartTime" parameterType="map" resultType="map">
		SELECT TZ.TIMEZONE_TIMEZONE, NVL(ST.STUDYTIME_STUDYTIME, 0) AS STUDYTIME_STUDYTIME, NVL(MEST.STUDYTIME_STUDYTIME, 0) AS MESTUDYTIME_STUDYTIME
		<![CDATA[
			FROM(SELECT LEVEL - 1 AS TIMEZONE_TIMEZONE
		    FROM DUAL
		    CONNECT BY LEVEL <= 24) TZ
		]]>
		LEFT JOIN(SELECT NVL(TO_CHAR(TO_DATE(ROUND(AVG(STUDYTIME_STUDYTIME)),'sssss'),'mi'), 0) AS STUDYTIME_STUDYTIME, STUDYTIME_TIMEZONE
		          FROM STUDYTIME
		          WHERE STUDYGROUP_CODE IN(SELECT STUDYGROUP_CODE
		                                   FROM STUDYGROUP
		                                   WHERE LOCATION_CODE = (SELECT LOCATION_CODE
		                                                          FROM STUDYGROUP
		                                                          WHERE STUDYGROUP_CODE = #{studygroup_Code}))
				  AND STUDYGROUP_CODE NOT IN(#{studygroup_Code}) 
		          <choose>
				 	 <when test="period eq 'thisMonth'">
						 AND TO_CHAR(STUDYTIME_DATE, 'YYYYMMDD') BETWEEN TO_CHAR(SYSDATE - 30, 'YYYYMMDD') AND TO_CHAR(SYSDATE, 'YYYYMMDD')
					 </when>
					 <when test="period eq 'thisWeek'">
						 AND TO_CHAR(STUDYTIME_DATE, 'YYYYMMDD') BETWEEN TO_CHAR(SYSDATE - 7, 'YYYYMMDD') AND TO_CHAR(SYSDATE, 'YYYYMMDD')
					 </when>
					 <when test="period eq 'today'">
						 AND TO_CHAR(STUDYTIME_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE, 'YYYYMMDD')
					 </when>
				  </choose>
		          GROUP BY STUDYTIME_TIMEZONE) ST ON(TZ.TIMEZONE_TIMEZONE = ST.STUDYTIME_TIMEZONE)
		LEFT JOIN(SELECT NVL(TO_CHAR(TO_DATE(ROUND(AVG(STUDYTIME_STUDYTIME)),'sssss'),'mi'), 0) AS STUDYTIME_STUDYTIME, STUDYTIME_TIMEZONE
		          FROM STUDYTIME
		          WHERE STUDYGROUP_CODE = #{studygroup_Code}
		          <choose>
				 	 <when test="period eq 'thisMonth'">
						 AND TO_CHAR(STUDYTIME_DATE, 'YYYYMMDD') BETWEEN TO_CHAR(SYSDATE - 30, 'YYYYMMDD') AND TO_CHAR(SYSDATE, 'YYYYMMDD')
					 </when>
					 <when test="period eq 'thisWeek'">
						 AND TO_CHAR(STUDYTIME_DATE, 'YYYYMMDD') BETWEEN TO_CHAR(SYSDATE - 7, 'YYYYMMDD') AND TO_CHAR(SYSDATE, 'YYYYMMDD')
					 </when>
					 <when test="period eq 'today'">
						 AND TO_CHAR(STUDYTIME_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE, 'YYYYMMDD')
					 </when>
				  </choose>
		          GROUP BY STUDYTIME_TIMEZONE) MEST ON(TZ.TIMEZONE_TIMEZONE = MEST.STUDYTIME_TIMEZONE)
		ORDER BY TZ.TIMEZONE_TIMEZONE
	</select>
	<!-- 지역 시간별 데이터 -->
</mapper>