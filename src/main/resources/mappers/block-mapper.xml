<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="Block">
	<resultMap type="Goal" id="goalResultSet">
  		<id property="goalCode" column="GOAL_CODE"/>
  		<result property="memberCode" column="MEMBER_CODE"/>
  		<result property="memberNickName" column="MEMBER_NICKNAME"/>
  		<result property="goalEnrollDate" column="GOAL_ENROLLDATE"/>
		<result property="goalContent" column="GOAL_CONTENT"/>
		<result property="goalType" column="GOAL_TYPE"/> 
		<result property="goalGoalAmount" column="GOAL_GOALAMOUNT"/>
		<result property="goalAchieveAmount" column="GOAL_ACHIEVEAMOUNT"/> 	
		<result property="gaolISBN" column="GOAL_ISBN"/>
		<result property="goalDivision" column="GOAL_DIVISION"/>
  	</resultMap>


	<resultMap type="PlayGameUsers" id="playGameUsersResultSet">
		<id property="user_Code" column="MEMBER_CODE"/>
		<result property="startgame_Time" column="STARTGAME_TIME"/>
		<result property="location_Name" column="LOCATION_NAME" />
		<result property="member_Job" column="MEMBER_JOB"/>
	</resultMap>

	<resultMap type="SGDetail" id="studyGroupResultSet">
		<id property="studyGroup_Code" column="STUDYGROUP_CODE"/>
		<result property="member_Code" column="MEMBER_CODE"/>
		<result property="member_NickName" column="MEMBER_NICKNAME"/>
		<result property="studyGroup_Name" column="STUDYGROUP_NAME"/>
		<result property="location_Name" column="LOCATION_NAME"/>
		<result property="studyGroup_GoalTime" column="STUDYGROUP_GOALTIME"/>
		<result property="studyGroup_MaxNum" column="STUDYGROUP_MAXNUM"/>
		<result property="studyGroup_Intro" column="STUDYGROUP_INTRO"/>
		<result property="studyGroup_StDate" column="STUDYGROUP_STDATE"/>
		<result property="syudyGroup_Status" column="STUDYGROUP_STATUS"/>
		<result property="studyGroup_EdDate" column="STUDYGROUP_EDDATE"/>
		<result property="category_Name" column="CATEGORY_NAME"/>
		<result property="studyGroup_OpenStatus" column="STUDYGROUP_OPENSTATUS"/>
		<result property="studyGroup_Pwd" column="STUDYGROUP_PWD"/>
		<result property="groupTotalStudyTime" column="TOTAL_STUDY_TIME"/>
	</resultMap>
	<!-- 오늘의 목표 리스트 -->
	<select id="selectGoalListAindTimes" resultMap="goalResultSet" parameterType="_int">
		SELECT G.GOAL_CODE, M.MEMBER_CODE, M.MEMBER_NICKNAME, G.GOAL_ENROLLDATE,
			   G.GOAL_CONTENT,G.GOAL_TYPE,G.GOAL_GOALAMOUNT,G.GOAL_ACHIEVEAMOUNT,
			   G.GOAL_ISBN,G.GOAL_DIVISION
		FROM GOAL G
		JOIN MEMBER M ON ( G.MEMBER_CODE = M.MEMBER_CODE)
		WHERE G.MEMBER_CODE = #{member_Code}
		AND TO_CHAR(GOAL_ENROLLDATE,'YYYY/MM/DD') = TO_CHAR(SYSDATE,'YYYY/MM/DD')
	</select>
	
	<!-- 내가 가입한 그룹 리스트와, 그룹별 오늘 공부 총량 -->
	<select id="selectGroupListAndTimes" resultMap="studyGroupResultSet" parameterType="_int">
		SELECT J.STUDYGROUP_CODE,G.STUDYGROUP_NAME,LOCATION_NAME,G.STUDYGROUP_GOALTIME,
		       G.STUDYGROUP_INTRO,C.CATEGORY_NAME,NVL(INTIME,0 ) AS "TOTAL_STUDY_TIME" 
		FROM JOINGROUP J
		LEFT JOIN ( SELECT STUDYGROUP_CODE AS "IN_GROUP_CODE" ,SUM(STUDYTIME_STUDYTIME) AS INTIME
		            FROM STUDYTIME
		            WHERE MEMBER_CODE = #{member_Code}
		            AND TO_CHAR(STUDYTIME_DATE,'YYYY/MM/DD') = TO_CHAR(SYSDATE,'YYYY/MM/DD')
		            AND STUDYTIME_DIVISION = 1
		            GROUP BY STUDYGROUP_CODE
		            ORDER BY STUDYGROUP_CODE) I ON ( STUDYGROUP_CODE = IN_GROUP_CODE )
		LEFT JOIN STUDYGROUP G ON ( J.STUDYGROUP_CODE = G.STUDYGROUP_CODE )
		JOIN CATEGORY C ON ( G.CATEGORY_CODE = C.CATEGORY_CODE )
		JOIN LOCATION L ON ( L.LOCATION_CODE = G.LOCATION_CODE  ) 
		WHERE J.MEMBER_CODE = #{member_Code}
		AND JOINGROUP_STATUS = 0
		AND G.STUDYGROUP_STATUS = 0
	</select>
	
	<select id="selectTodayStudyTime" resultType="_int" parameterType="_int">
		SELECT NVL(SUM(STUDYTIME_STUDYTIME),0)
		FROM STUDYTIME
		WHERE MEMBER_CODE = #{member_Code}
		AND TO_CHAR(STUDYTIME_DATE,'YYYY/MM/DD') = TO_CHAR(SYSDATE,'YYYY/MM/DD')
		AND STUDYTIME_DIVISION = 0
	</select>
	
	<update id="updateGoalStudyTimes" parameterType="arraylist">		
		<foreach collection="list" item="list"  index="index" 
				 separator=";" open="DECLARE BEGIN" close="; END;" >	
			UPDATE GOAL
			SET GOAL_ACHIEVEAMOUNT = TRUNC((GOAL_ACHIEVEAMOUNT + #{list.totalTime}))
			WHERE GOAL_CODE = #{list.code}
		</foreach>
	</update>
	
	<insert id="insertStudyTimes" parameterType="always.awake.studyplus.block.model.vo.StudyTimeInfo">
		<foreach collection="_parameter.timesMap.entrySet()" item="value"  index="key" 
				 separator=";" open="DECLARE BEGIN" close="; END;">
				MERGE INTO STUDYTIME S
				USING DUAL ON
	    			(TO_CHAR(S.STUDYTIME_DATE,'YYYY-MM-DD') = #{studyDate}
	     			 AND S.STUDYTIME_TIMEZONE = #{key}
	     			 AND MEMBER_CODE = #{loginUserCode} 
	     			 AND <if test="code != -99">
	            			S.STUDYGROUP_CODE = #{code}
	            			AND 
	            			S.STUDYTIME_DIVISION = 1
	            		 </if>
	            		 <if test="code == -99">
	            			STUDYTIME_DIVISION = 0
	            		</if>
	     			 )
				WHEN MATCHED THEN 
	    			UPDATE SET
	    			STUDYTIME_STUDYTIME = TRUNC(STUDYTIME_STUDYTIME + #{value})
				WHEN NOT MATCHED THEN
	    			INSERT (STUDYTIME_CODE, STUDYTIME_DATE ,STUDYTIME_TIMEZONE,
	            			STUDYTIME_STUDYTIME,STUDYTIME_DIVISION,STUDYGROUP_CODE,MEMBER_CODE )
	            	VALUES (SEQ_STUDYTIME_STUDYTIME_CODE.NEXTVAL ,
	            	 	TO_DATE (#{studyDate},'YYYY/MM/DD'), 
	            		#{key},TRUNC(#{value}),
	            		<if test="code == -99">0</if><if test="code != -99">1</if>,
	            		<if test="code == -99">null</if><if test="code != -99">#{code}</if>,
	            		#{loginUserCode})
		</foreach>
	</insert>
	
	
	<select id="selectGamePlayerList" resultMap="playGameUsersResultSet" parameterType="_int">
		SELECT SG.MEMBER_CODE , SG.STARTGAME_TIME ,
		L.LOCATION_NAME , M.MEMBER_JOB
		FROM STUDYGAME SG
		JOIN MEMBER M ON ( SG.MEMBER_CODE = M.MEMBER_CODE )
		JOIN LOCATION L ON ( M.LOCATION_CODE = L.LOCATION_CODE )
        
		WHERE M.LOCATION_CODE = ( SELECT LOCATION_CODE 
								  FROM MEMBER 
								  WHERE MEMBER_CODE = #{member_code})
        OR M.MEMBER_JOB = ( SELECT MEMBER_JOB 
							   FROM MEMBER 
							   WHERE MEMBER_CODE = #{member_code})
	</select>
</mapper>