<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="StudyPlanner">
	<resultMap type="StudyTime" id="StudyTimeResultSet">
		<id property="studyTimeCode" column="STUDYTIME_CODE"></id>
		<result property="studyTimeDate" column="STUDYTIME_DATE"/>
		<result property="studyTimeTimezone" column="STUDYTIME_TIMEZONE"/>
		<result property="studyTimeStudyTime" column="STUDYTIME_STUDYTIME"/>
		<result property="studyTimeDivision" column="STUDYTIME_DIVISION"/>
		<result property="studyGroupCode" column="STUDYGROUP_CODE"/>
		<result property="memberCode" column="MEMBER_CODE"/>
	</resultMap>
	
	<resultMap type="Goal" id="GoalResultSet">
		<id property="goalCode" column="GOAL_CODE"></id>
		<result property="memberCode" column="MEMBER_CODE"/>
		<result property="goalEnrollDate" column="GOAL_ENROLLDATE"/>
		<result property="goalContent" column="GOAL_CONTENT"/>
		<result property="goalType" column="GOAL_TYPE"/>
		<result property="goalGoalAmount" column="GOAL_GOALAMOUNT"/>
		<result property="goalAchieveAmount" column="GOAL_ACHIEVEAMOUNT"/>
		<result property="gaolISBN" column="GOAL_ISBN"/>
		<result property="goalDivision" column="GOAL_DIVISION"/>
	</resultMap>
	
	<resultMap type="PersonalRank" id="PersonalRankResultSet">
		<result property="rank" column="TIMERANK"/>
		<result property="rank_date" column="STUDYTIME_DATE"/>
	</resultMap>
	
	<!-- 일간 공부량 차트 -->
	<select id="selectTodayChart" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT * 
		FROM STUDYTIME 
		WHERE MEMBER_CODE = #{loginUserCode}
		AND STUDYTIME_DIVISION = 0
		AND STUDYTIME_DATE = #{chartDate}
	</select>
	
	<!-- 주간 공부량 차트 -->
	<select id="selectWeeklyChart" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT SUM(STUDYTIME_STUDYTIME), STUDYTIME_DATE
        FROM STUDYTIME
        WHERE MEMBER_CODE = #{loginUserCode}
		AND STUDYTIME_DIVISION = 0
		AND STUDYTIME_DATE BETWEEN #{chartDateYear[0]} AND #{chartDateYear[1]}
        GROUP BY STUDYTIME_DATE
        ORDER BY STUDYTIME_DATE
	</select>
	
	<!-- 월간 공부량 차트 -->
	<select id="selectMonthlyChart" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT * 
		FROM STUDYTIME 
		WHERE MEMBER_CODE = #{loginUserCode}
		AND STUDYTIME_DIVISION = 0
		AND STUDYTIME_DATE LIKE #{chartDateYear} || '%'
	</select>
	
	<!-- 오늘의 목표 리스트 -->
	<select id="selectTodayGoals" resultType="map" parameterType="map">
		SELECT GOAL_CODE,MEMBER_CODE,TO_CHAR(GOAL_ENROLLDATE, 'YYYY/MM/DD')AS GOAL_ENROLLDATE,
		GOAL_CONTENT,GOAL_TYPE,GOAL_GOALAMOUNT,NVL(GOAL_ACHIEVEAMOUNT,0) GOAL_ACHIEVEAMOUNT,GOAL_ISBN,GOAL_DIVISION
		FROM GOAL
		WHERE MEMBER_CODE = #{loginUserCode}
		AND GOAL_ENROLLDATE LIKE TO_DATE(#{checkDay})
		ORDER BY GOAL_CODE
		<!-- GOAL_DIVISION = 0 -->
	</select>
	
	<!-- 오늘의 목표 등록(시간 단위) -->
	<insert id="insertTodayTimeGoal" >
		INSERT INTO GOAL(GOAL_CODE, MEMBER_CODE, GOAL_ENROLLDATE, GOAL_CONTENT, 
		GOAL_TYPE, GOAL_GOALAMOUNT, GOAL_ISBN, GOAL_DIVISION)
		VALUES(SEQ_GOAL_GOAL_CODE.NEXTVAL, #{loginUserCode}, SYSDATE, #{goalName}, 1, #{goalTotaltime}, NULL, 0)
	</insert>
	
	<!-- 오늘의 목표 업데이트(시간 단위) -->
	<update id="updateTodayTimeGoal">
		UPDATE GOAL SET GOAL_CONTENT = #{goalName}, GOAL_GOALAMOUNT = #{goalTotaltime}
		WHERE GOAL_CODE = #{liIndex}
		AND MEMBER_CODE = #{loginUserCode}
		AND GOAL_TYPE = 1
	</update>
	
	<!-- 오늘의 목표 등록(페이지 단위) -->
	<insert id="insertTodayBookGoal" >
		INSERT INTO GOAL(GOAL_CODE, MEMBER_CODE, GOAL_ENROLLDATE, GOAL_CONTENT, 
		GOAL_TYPE, GOAL_GOALAMOUNT, GOAL_ISBN, GOAL_DIVISION)
		VALUES(SEQ_GOAL_GOAL_CODE.NEXTVAL, #{loginUserCode}, SYSDATE, #{goalName}, 0, #{goalPage}, NULL, 0)
	</insert>
	
	<!-- 오늘의 목표 업데이트(페이지 단위) -->
	<update id="updateTodayBookGoal">
		UPDATE GOAL SET GOAL_CONTENT = #{goalName}, GOAL_GOALAMOUNT = #{goalPage}, GOAL_ACHIEVEAMOUNT = #{goalAchiev}
		WHERE GOAL_CODE = #{liIndex}
		AND MEMBER_CODE = #{loginUserCode}
		AND GOAL_TYPE = 0
	</update>
	
	<!-- 주간 목표 리스트 -->
	<select id="selectWeeklyGoals" parameterType="map" resultType="map">
		SELECT GOAL_CODE,MEMBER_CODE, TRUNC(GOAL_ENROLLDATE) AS "GOAL_ENROLLDATE", TO_CHAR(GOAL_ENROLLDATE, 'dy') AS WEEK,
		GOAL_CONTENT,GOAL_TYPE,GOAL_GOALAMOUNT,NVL(GOAL_ACHIEVEAMOUNT,0) GOAL_ACHIEVEAMOUNT,GOAL_ISBN,GOAL_DIVISION
		FROM GOAL
		WHERE GOAL_DIVISION = 1
		AND MEMBER_CODE = #{loginUserCode}
        AND GOAL_ENROLLDATE BETWEEN TRUNC(TO_DATE(SYSDATE), 'DY')
        AND TRUNC(TO_DATE(SYSDATE), 'DY') + 6.99999
        ORDER BY GOAL_CODE
        
        <!-- SELECT DISTINCT GOAL_CODE, GOAL_CONTENT, GOAL_CONTENT,GOAL_TYPE,GOAL_GOALAMOUNT,
				NVL(GOAL_ACHIEVEAMOUNT,0) GOAL_ACHIEVEAMOUNT,GOAL_ISBN,GOAL_DIVISION
		FROM(SELECT GOAL_CODE,MEMBER_CODE, TRUNC(GOAL_ENROLLDATE) AS "GOAL_ENROLLDATE", 
		   		TO_CHAR(GOAL_ENROLLDATE, 'dy') AS WEEK, GOAL_CONTENT,GOAL_TYPE,
		    	GOAL_GOALAMOUNT,NVL(GOAL_ACHIEVEAMOUNT,0) GOAL_ACHIEVEAMOUNT,GOAL_ISBN,GOAL_DIVISION
		    FROM GOAL
		    WHERE GOAL_DIVISION = 1
		    AND MEMBER_CODE = #{loginUserCode}
		    AND GOAL_ENROLLDATE BETWEEN TRUNC(TO_DATE(SYSDATE), 'DY')
		    AND TRUNC(TO_DATE(SYSDATE), 'DY') + 6.99999
		    ORDER BY GOAL_CODE) -->
	</select>
	<!-- //주간 목표 리스트 -->
	
	<!-- 주간 목표 등록(시간 단위) -->
	<insert id="insertWeeklyTimeGoal">
		INSERT INTO GOAL(GOAL_CODE, MEMBER_CODE, GOAL_ENROLLDATE, GOAL_CONTENT, 
		GOAL_TYPE, GOAL_GOALAMOUNT, GOAL_ISBN, GOAL_DIVISION)
		<choose>
			<when test="insertNum eq 0">
				VALUES(SEQ_GOAL_GOAL_CODE.NEXTVAL, #{loginUserCode}, #{insertDay}, #{goalName}, 1, #{goalTotaltime}, NULL, 1)
			</when>
			<when test="insertNum eq 1">
				VALUES(SEQ_GOAL_GOAL_CODE.CURRVAL, #{loginUserCode}, #{insertDay}, #{goalName}, 1, #{goalTotaltime}, NULL, 1)
			</when>
		</choose>
	</insert>
	
	<!-- 주간 목표 업데이트(시간 단위) -->
	<update id="updateWeeklyTimeGoal">
		UPDATE GOAL SET GOAL_CONTENT = #{goalName}, GOAL_GOALAMOUNT = #{goalTotaltime}
		WHERE GOAL_CODE = #{liIndex}
		AND MEMBER_CODE = #{loginUserCode}
		AND GOAL_TYPE = 1
	</update>
	
	<!-- 주간 목표 등록(페이지 단위) -->
	<insert id="insertWeeklyBookGoal" >
		INSERT INTO GOAL(GOAL_CODE, MEMBER_CODE, GOAL_ENROLLDATE, GOAL_CONTENT, 
		GOAL_TYPE, GOAL_GOALAMOUNT, GOAL_ISBN, GOAL_DIVISION)
		VALUES(SEQ_GOAL_GOAL_CODE.NEXTVAL, #{loginUserCode}, SYSDATE, #{goalName}, 0, #{goalPage}, NULL, 1)
	</insert>
	
	<!-- 주간 목표 업데이트(페이지 단위) -->
	<update id="updateWeeklyBookGoal">
		UPDATE GOAL SET GOAL_CONTENT = #{goalName}, GOAL_GOALAMOUNT = #{goalPage}, GOAL_ACHIEVEAMOUNT = #{goalAchiev}
		WHERE GOAL_CODE = #{liIndex}
		AND MEMBER_CODE = #{loginUserCode}
		AND GOAL_TYPE = 0
	</update>
	
	<!--  개인 분야 주간 랭크(기완쓰) -->
	<select id="selectMemberWeeklyRank" parameterType="hashmap" resultMap="PersonalRankResultSet">
		<![CDATA[ 
		SELECT DATEZONE_DATEZONE, TIMERANK, MEMBER_CODE, STUDYTIME_DATE, SUMTIME
		FROM( SELECT TO_DATE(#{start_Date}, 'YY/MM/DD') + (ROWNUM - 1) AS DATEZONE_DATEZONE
		      FROM dual
		      CONNECT BY LEVEL <= 7) TZ
		LEFT JOIN( SELECT *
		           FROM (SELECT MEMBER_CODE, MEMBER_JOB, SUMTIME, RANK() OVER (PARTITION BY STUDYTIME_DATE ORDER BY SUMTIME DESC) AS "TIMERANK", STUDYTIME_DATE
		           FROM ( SELECT MEMBER_CODE, MEMBER_JOB, SUM(STUDYTIME_STUDYTIME) AS "SUMTIME", TRUNC(STUDYTIME_DATE) AS "STUDYTIME_DATE"
		                   FROM STUDYTIME
		                   JOIN MEMBER USING(MEMBER_CODE)
		                   WHERE STUDYTIME_DIVISION = 0
		                   AND TRUNC(STUDYTIME_DATE) >= TO_DATE(#{start_Date}, 'YY/MM/DD') AND TRUNC(STUDYTIME_DATE)  <= TO_DATE(#{end_Date}, 'YY/MM/DD')
		                   AND MEMBER_JOB = (SELECT MEMBER_JOB FROM MEMBER WHERE MEMBER_CODE = #{member_Code})
		                   GROUP BY MEMBER_CODE, MEMBER_JOB, TRUNC(STUDYTIME_DATE) )) WHERE MEMBER_CODE = #{member_Code}) ST
		ON(TZ.DATEZONE_DATEZONE = ST.STUDYTIME_DATE) ORDER BY DATEZONE_DATEZONE ASC
		]]>
	</select>
	
	<!--  개인 지역 주간 랭크(기완쓰) -->
	<select id="selectMemberWeeklyRank2" parameterType="hashmap" resultMap="PersonalRankResultSet">
		<![CDATA[ 
		SELECT DATEZONE_DATEZONE, TIMERANK, MEMBER_CODE, STUDYTIME_DATE, SUMTIME
		FROM( SELECT TO_DATE(#{start_Date}, 'YY/MM/DD') + (ROWNUM - 1) AS DATEZONE_DATEZONE
		      FROM dual
		      CONNECT BY LEVEL <= 7) TZ
		LEFT JOIN( SELECT *
		           FROM (SELECT MEMBER_CODE, LOCATION_CODE, SUMTIME, RANK() OVER (PARTITION BY STUDYTIME_DATE ORDER BY SUMTIME DESC) AS "TIMERANK", STUDYTIME_DATE
		           FROM ( SELECT MEMBER_CODE, LOCATION_CODE, SUM(STUDYTIME_STUDYTIME) AS "SUMTIME", TRUNC(STUDYTIME_DATE) AS "STUDYTIME_DATE"
		                   FROM STUDYTIME
		                   JOIN MEMBER USING(MEMBER_CODE)
		                   WHERE STUDYTIME_DIVISION = 0
		                   AND TRUNC(STUDYTIME_DATE) >= TO_DATE(#{start_Date}, 'YY/MM/DD') AND TRUNC(STUDYTIME_DATE)  <= TO_DATE(#{end_Date}, 'YY/MM/DD')
		                   AND LOCATION_CODE = (SELECT LOCATION_CODE FROM MEMBER WHERE MEMBER_CODE = #{member_Code})
		                   GROUP BY MEMBER_CODE, LOCATION_CODE, TRUNC(STUDYTIME_DATE) )) WHERE MEMBER_CODE = #{member_Code}) ST
		ON(TZ.DATEZONE_DATEZONE = ST.STUDYTIME_DATE) ORDER BY DATEZONE_DATEZONE ASC
		]]>
	</select>
	
</mapper>