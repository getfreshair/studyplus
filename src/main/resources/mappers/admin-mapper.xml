<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="Admin">
	<resultMap type="adminMember" id="adminmemberResultSet">
		<id property="member_Code" column="member_Code"></id>
		<result property="member_Id" column="member_Id"/>
		<result property="member_Pwd" column="member_Pwd"/>
		<result property="member_Nickname" column="member_Nickname"/>
		<result property="member_EnrollDate" column="member_EnrollDate"/>
		<result property="member_Status" column="member_Status"/>
		<result property="member_Class" column="member_Class"/>
		<result property="member_Introduction" column="member_Introduction"/>
		<result property="member_Age" column="member_Age"/>
		<result property="member_Job" column="member_Job"/>
		<result property="member_Gender" column="member_Gender"/>
		<result property="location_Code" column="location_Code"/>
		<result property="member_Phone" column="member_Phone"/>
		<result property="member_SMSConfirmation" column="member_SMSConfirmation"/>
		<collection property="files" javaType="memberFiles" resultMap="adminFiles"/>
		<collection property="category_Name" javaType="java.util.ArrayList" resultMap="adminInterestCategory"/>
	</resultMap>
	
<!-- 	<resultMap type="adminPenalty" id="adminPenaltyResultSet"> -->
<!-- 		<id property ="member_Code" column="member_Code"></id> -->
<!-- 		<result property="member_Id" column = "member_Id"/> -->
<!-- 		<result property="member_Status" column ="member_Status"/> -->
<!-- 		<result property="block_Code" column = "block_Code"/> -->
<!-- 		<result property="block_StartDate" column="block_StartDate"/> -->
<!-- 		<result property="block_EndDate" column="block_EndDate"/> -->
<!-- 		<result property="block_Reason" column = "block_Reason"/> -->
<!-- 		<result property="block_status" column="block_status"/> -->
<!-- 	</resultMap> -->
	
	<resultMap type="adminInterestCategory" id="admininterestCategoryResultSet">
		<result property="category_Name" column="category_Name"/>
	</resultMap>
	
	<resultMap type="adminFiles" id="adminfilesSet">
		<id property="files_Code" column="files_Code"/>
		<result property="files_BoardType" column="fileBoardType"/>
		<result property="files_OriginName" column="files_OriginName"/>
		<result property="files_Name" column="files_Name"/>
		<result property="files_EnrollDate" column="files_EnrollDate"/>
		<result property="files_Status" column="files_Status"/>
		<result property="files_DeleteDate" column="files_DeleteDate"/>
		<result property="member_Code" column="member_Code"/>
		<result property="group_Code" column="group_Code"/>
		<result property="pr_Code" column="pr_Code"/>
		<result property="board_Code" column="board_Code"/>
	</resultMap>
	
	
	<select id="selectMember" parameterType="map" resultType="hashmap">
	
	SELECT M.MEMBER_CODE, M.MEMBER_ID, M.MEMBER_NICKNAME,
		TO_CHAR(M.MEMBER_ENROLLDATE,'yyyy-mm-dd') AS MEMBER_ENROLLDATE, M.MEMBER_AGE, M.MEMBER_JOB, M.MEMBER_PHONE,
		M.MEMBER_GENDER, L.LOCATION_NAME,
		C.CATEGORY_NAME
		FROM MEMBER M
		JOIN LOCATION L ON(M.LOCATION_CODE = L.LOCATION_CODE)
		LEFT JOIN INTERESTCATEGORY IC ON(M.MEMBER_CODE = IC.MEMBER_CODE)
		LEFT JOIN CATEGORY C ON(IC.CATEGORY_CODE = C.CATEGORY_CODE)
	WHERE 1=1
	<if test='All neq ""'>
		AND(
		M.MEMBER_ID LIKE '%' || #{All} || '%'
		OR L.LOCATION_NAME LIKE '%' || #{All} || '%'
		OR M.MEMBER_NICKNAME LIKE '%' || #{All} || '%'
		OR M.MEMBER_PHONE LIKE '%' || #{All} || '%'
		OR M.MEMBER_GENDER LIKE '%' || #{All} || '%'
		)
	</if>
	<if test='Date1 neq ""'>
		AND
		M.MEMBER_ENROLLDATE BETWEEN #{Date1} AND #{Date2}
	</if>
	<if test='Option neq "전체"'>
		AND
		C.CATEGORY_NAME = #{Option}
	</if>
	</select>																	
	
	<insert id="penaltyMemberInsert">
		insert into BLOCK(BLOCK_CODE,BLOCK_REASON,BLOCK_TYPE,BLOCK_STARTDATE,BLOCK_ENDDATE,BLOCK_STATUS,MEMBER_CODE) VALUES(SEQ_BLOCK_BLOCK_CODE.NEXTVAL, #{textArea}, 0, SYSDATE, #{lockDate}, 0, #{code})
	</insert>
	
	<insert id="insertNotice">
		INSERT INTO NOTICE(NOTICE_CODE, NOTICE_TITLE, NOTICE_CONTENT, NOTICE_ENROLLDATE, NOTICE_DELETEDATE, NOTICE_STATUS, NOTICE_COUNT, MEMBER_CODE) VALUES(SEQ_NOTICE_NOTICE_CODE.NEXTVAL, #{title}, #{content}, SYSDATE, NULL, 0, 0, #{adminCode})
	</insert>

	<insert id="insertCPP" parameterType="hashmap" >
		INSERT INTO PR 
		VALUES(SEQ_PR_PR_CODE.NEXTVAL, #{b.pr_Company}, #{b.pr_Title}, #{b.pr_Link}, 1,
		0, #{b.pr_Contractmoney}, #{b.category_Code}, #{b.pr_StartDate}, #{b.pr_EndDate}, 0)
	</insert>
	<insert id="insertFilesCPP" parameterType="hashmap" >
		INSERT INTO FILES(FILES_CODE, FILES_BOARDTYPE, FILES_ORIGINNAME, FILES_NAME, FILES_ENROLLDATE, FILES_STATUS, FILES_DELETEDATE, PR_CODE) 
		VALUES(SEQ_FILES_FILES_CODE.NEXTVAL, 3, #{originFileName}, #{changeName}, SYSDATE, 0, NULL, SEQ_PR_PR_CODE.CURRVAL)
	</insert>
	
	<insert id="insertCPC" parameterType="hashmap" >
		INSERT INTO PR (PR_CODE, PR_COMPANY, PR_TITLE, PR_LINK, PR_ORDER, PR_TYPE, PR_CONTRACTMONEY, CATEGORY_CODE, PR_STATUS)
		VALUES(SEQ_PR_PR_CODE.NEXTVAL, #{b.pr_Company}, #{b.pr_Title}, #{b.pr_Link}, 0,
		1, #{b.pr_Contractmoney}, #{b.category_Code},0)
	</insert>
	<insert id="insertFilesCPC" parameterType="hashmap" >
		INSERT INTO FILES(FILES_CODE, FILES_BOARDTYPE, FILES_ORIGINNAME, FILES_NAME, FILES_ENROLLDATE, FILES_STATUS, FILES_DELETEDATE, PR_CODE) 
		VALUES(SEQ_FILES_FILES_CODE.NEXTVAL, 3, #{originFileName}, #{changeName}, SYSDATE, 0, NULL, SEQ_PR_PR_CODE.CURRVAL)
	</insert>
	
	<update id="penaltyMemberUpdate">
		UPDATE MEMBER SET MEMBER_STATUS = 3 WHERE MEMBER_CODE = #{code}
	</update>
	
	<update id="penaltyEndMember">
		UPDATE BLOCK SET BLOCK_STATUS = 1 WHERE BLOCK_CODE = #{code}
	</update>
	
	<update id="penaltyEndMemberUpdate">
		UPDATE MEMBER SET MEMBER_STATUS = 0 
		WHERE MEMBER_CODE = (SELECT B.MEMBER_CODE
                             FROM BLOCK B
                             WHERE BLOCK_CODE=#{code})
	</update>
	
	<update id="updateDispauseMember">
		UPDATE MEMBER SET MEMBER_STATUS = 1
		WHERE MEMBER_CODE = #{code}
	</update>
	
	<update id="deleteNotice">
		UPDATE NOTICE SET NOTICE_STATUS=1, NOTICE_DELETEDATE = SYSDATE
		WHERE NOTICE_CODE = #{code} 
	</update>
	
	<update id="updateBoardStatus">
		UPDATE GROUPBOARD SET GROUPBOARD_STATUS = 2
		WHERE GROUPBOARD_CODE = #{code}
	</update>
	
	<update id="updateCPP">
		UPDATE PR SET PR_TITLE = #{b.pr_Title}, PR_LINK = #{b.pr_Link} , PR_CONTRACTMONEY = #{b.pr_Contractmoney}
		WHERE PR_CODE = #{b.pr_Code}
	</update>
	
	<update id="updateCPPImg">
		UPDATE FILES SET FILES_ORIGINNAME = #{originFileName}, FILES_NAME = #{changeName}
		WHERE PR_CODE = #{b.pr_Code}
	</update>
	
	<update id="updateCPC">
		UPDATE PR SET PR_TITLE = #{b.pr_Title}, PR_LINK = #{b.pr_Link} , PR_CONTRACTMONEY = #{b.pr_Contractmoney}
		WHERE PR_CODE = #{b.pr_Code}
	</update>
	
	<update id="updateCPCImg">
		UPDATE FILES SET FILES_ORIGINNAME = #{originFileName}, FILES_NAME = #{changeName}
		WHERE PR_CODE = #{b.pr_Code}
	</update>
	
	<update id="updateSingleReward">
		UPDATE REWARD SET REWARD_STATUS = 1 , REWARD_ISSUEDATE = SYSDATE
		WHERE REWARD_CODE = #{code}
	</update>
	
	<update id="deletePR">
		UPDATE PR SET PR_STATUS = 2
		WHERE PR_CODE = #{code} 
	</update>
	
	<select id="getPenaltyList" parameterType="map" resultType="hashmap">
		SELECT M.MEMBER_CODE, M.MEMBER_ID, M.MEMBER_STATUS, B.BLOCK_CODE,
		  		B.BLOCK_STARTDATE, B.BLOCK_ENDDATE, B.BLOCK_REASON, B.BLOCK_STATUS
		FROM MEMBER M
		JOIN BLOCK B ON(M.MEMBER_CODE = B.MEMBER_CODE)
	    WHERE M.MEMBER_STATUS = 3 AND B.BLOCK_ENDDATE > SYSDATE AND
	    B.ROWID in (SELECT MIN(B.ROWID) from BLOCK B group by B.MEMBER_CODE)
	</select>
	
	<select id="getPenaltyEndList" parameterType="map" resultType="hashmap">
		SELECT M.MEMBER_CODE, M.MEMBER_ID, M.MEMBER_STATUS, B.BLOCK_CODE,
		B.BLOCK_STARTDATE, B.BLOCK_ENDDATE, B.BLOCK_REASON, B.BLOCK_STATUS
		FROM
		MEMBER M
		JOIN BLOCK B ON(M.MEMBER_CODE = B.MEMBER_CODE)
		WHERE M.MEMBER_STATUS = 3 AND SYSDATE > B.BLOCK_ENDDATE AND
		B.ROWID in (SELECT MIN(B.ROWID) from BLOCK B group by B.MEMBER_CODE)
	</select>
	
	<select id="searchPenaltyHistoryById" parameterType="map" resultType="hashmap">
		SELECT M.MEMBER_CODE, M.MEMBER_ID, M.MEMBER_STATUS, B.BLOCK_CODE,
		B.BLOCK_STARTDATE, B.BLOCK_ENDDATE, B.BLOCK_REASON, B.BLOCK_STATUS
		FROM MEMBER M 
		JOIN BLOCK B ON(M.MEMBER_CODE = B.MEMBER_CODE)
		WHERE M.MEMBER_ID LIKE '%' || #{keyword} || '%'
	</select>
	
	<select id="searchPenaltyHistoryByCode" parameterType="map" resultType="hashmap">
		SELECT M.MEMBER_CODE, M.MEMBER_ID, M.MEMBER_STATUS, B.BLOCK_CODE,
		B.BLOCK_STARTDATE, B.BLOCK_ENDDATE, B.BLOCK_REASON, B.BLOCK_STATUS
		FROM MEMBER M 
		JOIN BLOCK B ON(M.MEMBER_CODE = B.MEMBER_CODE)
		WHERE M.MEMBER_CODE LIKE '%' || #{keyword} || '%'
	</select>
	
	<select id="searchPenaltyHistoryByReason" parameterType="map" resultType="hashmap">
		SELECT M.MEMBER_CODE, M.MEMBER_ID, M.MEMBER_STATUS, B.BLOCK_CODE,
		B.BLOCK_STARTDATE, B.BLOCK_ENDDATE, B.BLOCK_REASON, B.BLOCK_STATUS
		FROM MEMBER M 
		JOIN BLOCK B ON(M.MEMBER_CODE = B.MEMBER_CODE)
		WHERE B.BLOCK_REASON LIKE '%' || #{keyword} || '%'
	</select>
	
	<select id="getDispauseList" parameterType="map" resultType="hashmap">
		SELECT M.MEMBER_CODE, M.MEMBER_ID, M.MEMBER_NICKNAME, M.MEMBER_GENDER, M.MEMBER_STATUS,
        M.MEMBER_PHONE, M.MEMBER_SMSCONFIRMATION, M.MEMBER_JOB , L.LOGINRECORD_DATE
        FROM MEMBER M
        JOIN LOGINRECORD L ON (M.MEMBER_CODE = L.MEMBER_CODE)
		WHERE M.MEMBER_STATUS = 0 AND (SYSDATE - L.LOGINRECORD_DATE) > 90
	</select>
	
	<select id="searchDispauseList" parameterType="java.util.HashMap" resultType="always.awake.studyplus.admin.model.vo.DispauseBoard">
		SELECT M.MEMBER_CODE, M.MEMBER_ID, M.MEMBER_NICKNAME, M.MEMBER_GENDER, M.MEMBER_PHONE,
				M.MEMBER_SMSCONFIRMATION, TO_CHAR(L.LOGINRECORD_DATE,'YYYYMMDD') AS LOGINRECORD_DATE, M.MEMBER_STATUS
		FROM MEMBER M
		JOIN LOGINRECORD L ON (M.MEMBER_CODE = L.MEMBER_CODE)
		WHERE 1= 1
		<if test='option eq "memberId"'>
			AND
			M.MEMBER_ID LIKE '%' || #{keyword} || '%'
		</if>
		<if test='option eq "memberCode"'>
			AND
			M.MEMBER_CODE LIKE '%' || #{keyword} || '%'
		</if>
	</select>
	
	<select id="countDispauseArticle" parameterType="java.util.HashMap" resultType="_int">
		SELECT COUNT(*)
		FROM MEMBER M
		WHERE M.MEMBER_STATUS = 1 
		<if test='option eq "memberId"'>
		AND M.MEMBER_ID LIKE '%' || #{keyword} || '%'
		</if>
		<if test='option eq "memberCode"'>
		AND M.MEMBER_CODE LIKE '%' || #{keyword} || '%'
		</if>
	</select>
	
	<select id="searchGroupList" parameterType="java.util.HashMap" resultType="hashmap">
		SELECT M.MEMBER_ID,M.MEMBER_PHONE, SG.STUDYGROUP_CODE, SG.STUDYGROUP_NAME, SG.STUDYGROUP_OPENSTATUS, SG.STUDYGROUP_INTRO, TO_CHAR(STUDYGROUP_STDATE, 'yyyy-mm-dd') AS STUDYGROUP_STDATE, SG.STUDYGROUP_GOALTIME, SG.STUDYGROUP_MAXNUM, SG.MEMBER_CODE, C.CATEGORY_NAME, L.LOCATION_NAME, NVL(JG.JOINGROUP_MEMBERCOUNT, 0) AS JOINGROUP_MEMBERCOUNT
		FROM STUDYGROUP SG
		JOIN LOCATION L USING(LOCATION_CODE)
		JOIN CATEGORY C USING(CATEGORY_CODE)
        JOIN MEMBER M ON(SG.MEMBER_CODE = M.MEMBER_CODE)
		LEFT JOIN (SELECT COUNT(MEMBER_CODE) AS JOINGROUP_MEMBERCOUNT, STUDYGROUP_CODE
		            FROM JOINGROUP
		            GROUP BY STUDYGROUP_CODE) JG ON(SG.STUDYGROUP_CODE = JG.STUDYGROUP_CODE)
		WHERE 1=1
		<if test='keyword neq ""'>
			AND (SG.STUDYGROUP_NAME LIKE '%' || #{keyword} || '%' 
			OR C.CATEGORY_NAME LIKE '%' || #{keyword} || '%'
			OR L.LOCATION_NAME LIKE '%' || #{keyword} || '%'
			OR SG.STUDYGROUP_CODE LIKE '%' || #{keyword} || '%')
		</if>
		<if test='option neq "전체"'>
			AND C.CATEGORY_NAME = #{option}
		</if>
		<if test='createDate1 neq ""'>
			AND SG.STUDYGROUP_STDATE BETWEEN #{createDate1} AND #{createDate2}
		</if>
	</select>
	
	<select id="getNoticeListCount" parameterType="map" resultType="_int">
		SELECT COUNT(*)
		FROM NOTICE
		WHERE NOTICE_STATUS = 0
		<if test='option eq "noticeCode"'>
			AND NOTICE_CODE LIKE '%' ||#{keyword}|| '%'
		</if>
		<if test='option eq "noticeTitle"'>
			AND NOTICE_TITLE LIKE '%' ||#{keyword}|| '%'
		</if>
	</select>
	
	<select id="getNoticeList" parameterType="map" resultType="hashmap">
		SELECT *
		FROM NOTICE N
		WHERE NOTICE_STATUS = 0
		<if test='option eq "noticeCode"'>
			AND NOTICE_CODE LIKE '%' ||#{keyword}|| '%'
		</if>
		<if test='option eq "noticeTitle"'>
			AND NOTICE_TITLE LIKE '%' ||#{keyword}|| '%'
		</if>
		ORDER BY NOTICE_CODE DESC
	</select>
	
	<select id="getGroupBoardListCount" parameterType="map" resultType="_int">
		SELECT SUM(NUM)
		FROM (
		SELECT COUNT(*) AS NUM
		FROM GROUPBOARD
		WHERE 1=1
		<if test='option eq "boardContent"'>
			AND GROUPBOARD_CONTENT LIKE '%' ||#{keyword}|| '%'
		</if>
		<if test='option eq "memberCode"'>
			AND MEMBER_CODE LIKE '%' ||#{keyword}|| '%' 
		</if>
		UNION ALL
		SELECT COUNT(*)AS NUM
		FROM REPLY
		WHERE 1=1
		<if test="option eq null">
		)
		</if>
		<if test='option eq "boardContent"'>
			AND REPLY_CONTENT LIKE '%' ||#{keyword}|| '%')
		</if>
		<if test='option eq "memberCode"'>
			AND MEMBER_CODE LIKE '%' ||#{keyword}|| '%' )
		</if>

	</select>
	
	<select id="getGroupBoardList" parameterType="map" resultType="hashmap">
		SELECT code, member, content, post, type , boardCode, nick ,groupName , status, board
		from
		(SELECT G.GROUPBOARD_CODE as code,G.MEMBER_CODE as member, G.GROUPBOARD_CONTENT as content, TO_CHAR(G.GROUPBOARD_POSTDATE,'yyyymmdd') as post, '그룹' as type , G.STUDYGROUP_CODE as boardCode, M.MEMBER_NICKNAME as nick, SG.STUDYGROUP_NAME as groupName, g.groupboard_status as status ,g.groupboard_type as board
		FROM GROUPBOARD G
		JOIN MEMBER M ON (M.MEMBER_CODE = G.MEMBER_CODE)
		JOIN STUDYGROUP SG ON (SG.STUDYGROUP_CODE = G.STUDYGROUP_CODE)
		WHERE 1=1 
		<if test='option eq "memberCode"'>
		AND G.MEMBER_CODE = #{keyword}
		</if>
		<if test='option eq "boardContent"'>
		AND G.GROUPBOARD_CONTENT LIKE '%'||#{keyword}||'%'
		</if>
		UNION ALL
		SELECT R.REPLY_CODE as code,R.MEMBER_CODE as member, R.REPLY_CONTENT as content, TO_CHAR(R.REPLY_DATE,'yyyymmdd') as post, '리플' as type, R.GROUPBOARD_CODE as boardCode, M.MEMBER_NICKNAME as nick, SG.STUDYGROUP_NAME as groupName, g.groupboard_status as status ,g.groupboard_type as board
		FROM REPLY R
		JOIN MEMBER M ON (M.MEMBER_CODE = R.MEMBER_CODE)
		JOIN GROUPBOARD G ON (R.GROUPBOARD_CODE = G.GROUPBOARD_CODE)
		JOIN STUDYGROUP SG ON (SG.STUDYGROUP_CODE = g.studygroup_code)
		WHERE 1=1
		<if test="option eq null">
		)
		</if>
		<if test='option eq "memberCode"'>
		AND R.MEMBER_CODE = #{keyword})
		</if>
		<if test='option eq "boardContent"'>
		AND R.REPLY_CONTENT LIKE '%'||#{keyword}||'%')
		</if>
		
	</select>
	
	<select id="getPRList" parameterType="map" resultType="map">
		SELECT PR_CODE,PR_COMPANY,PR_TITLE,PR_LINK,PR_ORDER,PR_TYPE,
				PR_CONTRACTMONEY,CATEGORY_CODE, PR_STATUS, TO_CHAR(PR_STARTDATE,'yyyymmdd') as PR_STARTDATE, TO_CHAR(PR_ENDDATE,'yyyymmdd') as PR_ENDDATE,
				FILES_CODE,FILES_BOARDTYPE,FILES_ORIGINNAME,FILES_NAME,
				FILES_ENROLLDATE,FILES_STATUS,FILES_DELETEDATE
		FROM PR
		JOIN FILES USING(PR_CODE)
	</select>
	
	<select id="selectPR" parameterType="map" resultType="map">
		SELECT PR_CODE,PR_COMPANY,PR_TITLE,PR_LINK,PR_ORDER,PR_TYPE,
				PR_CONTRACTMONEY,CATEGORY_CODE, PR_STATUS, PR_STARTDATE, PR_ENDDATE,
				FILES_CODE,FILES_BOARDTYPE,FILES_ORIGINNAME,FILES_NAME,
				FILES_ENROLLDATE,FILES_STATUS,FILES_DELETEDATE
		FROM PR
		JOIN FILES USING(PR_CODE)
		WHERE PR_CODE = #{prCode}
	</select>
	
	
	<select id="searchPRList" parameterType="map" resultType="map">
		SELECT PR_CODE,PR_COMPANY,PR_TITLE,PR_LINK,PR_ORDER,PR_TYPE,
				PR_CONTRACTMONEY,CATEGORY_CODE, PR_STATUS, TO_CHAR(PR_STARTDATE,'yyyymmdd') AS PR_STARTDATE, TO_CHAR(PR_ENDDATE,'yyyymmdd')AS PR_ENDDATE,
				FILES_CODE,FILES_BOARDTYPE,FILES_ORIGINNAME,FILES_NAME,
				FILES_ENROLLDATE,FILES_STATUS,FILES_DELETEDATE, CATEGORY_NAME
		FROM PR
		JOIN FILES USING(PR_CODE)
		JOIN CATEGORY USING(CATEGORY_CODE)
		WHERE 1=1
		<if test='keyword neq ""'>
			AND (PR_COMPANY LIKE '%' || #{keyword} || '%' 
			OR PR_TITLE LIKE '%' || #{keyword} || '%'
			OR PR_LINK LIKE '%' || #{keyword} || '%')
		</if>
		<if test='option neq "전체"'>
			AND CATEGORY_NAME = #{option}
		</if>
		<if test='createDate1 neq ""'>
			AND PR_STARTDATE BETWEEN #{createDate1} AND #{createDate2}
		</if>
		<if test='createDate2 neq ""'>
			AND PR_ENDDATE BETWEEN #{createDate1} AND #{createDate2}
		</if>
	</select>
	
	<select id="getSingleRewardListCount" parameterType="map" resultType="_int">
		SELECT count(*)
		FROM REWARD
		WHERE REWARD_TYPE=0 AND REWARD_STATUS=0
		AND MEMBER_CODE IS NOT NULL
	</select>
	
	<select id="getSingleRewardList" parameterType="map" resultType="map">
		SELECT DISTINCT MEMBER_CODE , MEMBER_ID, MEMBER_NICKNAME, MEMBER_ENROLLDATE, MEMBER_AGE, MEMBER_JOB, 
        MEMBER_PHONE, REWARD_APPDATE, REWARD_STATUS,REWARD_CODE, NEEDLEVEL_LEVEL, CATEGORY_NAME
        FROM(
        SELECT  MEMBER_CODE , MEMBER_ID, MEMBER_NICKNAME, MEMBER_ENROLLDATE, MEMBER_AGE, MEMBER_JOB, 
        MEMBER_PHONE, REWARD_APPDATE, REWARD_CODE,REWARD_STATUS, NEEDLEVEL_LEVEL, LISTAGG(CATEGORY_NAME,',') within group (order by REWARD_APPDATE) OVER (PARTITION BY MEMBER_CODE) AS CATEGORY_NAME
		FROM(
		SELECT M.MEMBER_CODE, M.MEMBER_ID, M.MEMBER_NICKNAME, M.MEMBER_ENROLLDATE, M.MEMBER_AGE, M.MEMBER_JOB, 
		       M.MEMBER_PHONE,R.REWARD_APPDATE, R.REWARD_STATUS,R.REWARD_CODE, NL.NEEDLEVEL_LEVEL, C.CATEGORY_NAME 
		FROM MEMBER M
		JOIN INTERESTCATEGORY IC ON (M.MEMBER_CODE = IC.MEMBER_CODE)
		JOIN CATEGORY C ON (IC.CATEGORY_CODE = C.CATEGORY_CODE)
		JOIN REWARD R ON (M.MEMBER_CODE = R.MEMBER_CODE)
		JOIN NEED N ON (N.MEMBER_CODE = M.MEMBER_CODE)
		JOIN NEEDLEVEL NL ON (N.NEEDLEVEL_CODE = NL.NEEDLEVEL_CODE)
		WHERE R.REWARD_STATUS = 0 AND R.REWARD_TYPE = 0 AND M.MEMBER_CODE IS NOT NULL))
	</select>
	
	<select id="searchSingleRewardHistoryCount" resultType="_int">
		SELECT count(*)
		FROM REWARD
		JOIN MEMBER USING(MEMBER_CODE)
		WHERE REWARD_TYPE=0 AND REWARD_STATUS=1
		<if test='option eq "userId"'>
			AND MEMBER_ID LIKE '%' ||#{keyword}|| '%'
		</if>
		<if test='option eq "userNick"'>
			AND MEMBER_NICKNAME LIKE '%' ||#{keyword}|| '%'
		</if>
	</select>
	
	<select id="searchSingleRewardHistory" resultType="map" parameterType="map">
		SELECT DISTINCT MEMBER_CODE , MEMBER_ID, MEMBER_NICKNAME, MEMBER_ENROLLDATE, MEMBER_AGE, MEMBER_JOB, 
        MEMBER_PHONE, TO_CHAR(REWARD_ISSUEDATE,'yyyymmdd') as REWARD_ISSUEDATE, REWARD_STATUS,REWARD_CODE, NEEDLEVEL_LEVEL, CATEGORY_NAME
        FROM(
        SELECT  MEMBER_CODE , MEMBER_ID, MEMBER_NICKNAME, MEMBER_ENROLLDATE, MEMBER_AGE, MEMBER_JOB, 
        MEMBER_PHONE, REWARD_ISSUEDATE, REWARD_CODE,REWARD_STATUS, NEEDLEVEL_LEVEL, LISTAGG(CATEGORY_NAME,',') within group (order by REWARD_ISSUEDATE) OVER (PARTITION BY MEMBER_CODE) AS CATEGORY_NAME
		FROM(
		SELECT M.MEMBER_CODE, M.MEMBER_ID, M.MEMBER_NICKNAME, M.MEMBER_ENROLLDATE, M.MEMBER_AGE, M.MEMBER_JOB, 
		       M.MEMBER_PHONE,R.REWARD_ISSUEDATE, R.REWARD_STATUS,R.REWARD_CODE, NL.NEEDLEVEL_LEVEL, C.CATEGORY_NAME 
		FROM MEMBER M
		JOIN INTERESTCATEGORY IC ON (M.MEMBER_CODE = IC.MEMBER_CODE)
		JOIN CATEGORY C ON (IC.CATEGORY_CODE = C.CATEGORY_CODE)
		JOIN REWARD R ON (M.MEMBER_CODE = R.MEMBER_CODE)
		JOIN NEED N ON (N.MEMBER_CODE = M.MEMBER_CODE)
		JOIN NEEDLEVEL NL ON (N.NEEDLEVEL_CODE = NL.NEEDLEVEL_CODE)
		WHERE R.REWARD_STATUS = 1 AND R.REWARD_TYPE = 0 AND M.MEMBER_CODE IS NOT NULL AND
		1=1
		<if test='option eq null'>
			))
		</if>
		<if test='option eq "userId"'>
			AND MEMBER_ID LIKE '%' ||#{keyword}|| '%' ))
		</if>
		<if test='option eq "userNick"'>
			AND MEMBER_NICKNAME LIKE '%' ||#{keyword}|| '%'))
		</if>
	</select>
	
</mapper>